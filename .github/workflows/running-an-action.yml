name: Running an action

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

on: 
  workflow_dispatch:

  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  speak:
    runs-on: ubuntu-latest

    steps:
    - name: Hello
      run: echo "Hello, world!"

  test:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Tests with pytest
        run: |
          cd news_scraper/movie_api
          pytest
        continue-on-error: true

      # - name: Run the unit tests with pytest
      #   run: |
      #     pip install pytest pytest-cov
      #     pip install pytest-json-report
      #     cd news_scraper/movie_api
      #     pytest --json-report --json-report-summary --json-report-file=movie-api-report.json --json-report-indent=4 || echo "ignore exit code 1"
      #     pytest --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
      #   continue-on-error: true

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with pylint
        run: |
          cd news_scraper/movie_api
          pylint *.py --fail-under=8.0
    
  deploy:
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to Staging server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          # ARGS: "-rlgoDzvc -i"
          # SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
          # EXCLUDE: "/dist/, /node_modules/"
          # SCRIPT_BEFORE: |
          #   whoami
          #   ls -al
          # SCRIPT_AFTER: |
          #   whoami
          #   ls -al
          #   echo $RSYNC_STDOUT
  
  badge:
    # needs: [deploy]
    runs-on: ubuntu-latest
    
    steps:
      - name: checkout
        uses: actions/checkout@v3

        # Create the directory where badges will be saved, if needed
      - name: Create destination directory for badge
        env:
          BADGE_PATH: .github/badges/code_quality.svg
        run: mkdir -p "${BADGE_PATH%/*}"

        # Use the output from the `average_score` step
      - name: Generate the badge SVG image
        uses: emibcn/badge-action@v1
        id: done_badge
        with:
          label: 'Done: '
          status: 'Yes'
          color: 'blue'
          path: .github/badges/done.svg
          scale: 1.5

      - name: Upload badge as artifact
        uses: actions/upload-artifact@v2
        with:
          name: badge
          path: .github/badges/done.svg
          if-no-files-found: ignore

      - name: Committing logs and badge to the repository
        if: github.repository != 'sigma-labs-xyz/coursework-template'
        run: |
          git config --global user.name "Faris-Abulula"
          git config --global user.email "abululb02@gmail.com"
          git pull
          # git add .github/badges/done.svg
          # git checkout main
          # git diff-index --quiet HEAD || git commit -am "Update Done"
          # git push