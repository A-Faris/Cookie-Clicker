name: Running an action

on: 
  workflow_dispatch:

  push:
    branches:    
      - main

  pull_request:
    branches:
      - main
    
permissions:
  contents: read
  pull-requests: read

jobs:
  speak:
    runs-on: ubuntu-latest

    steps:
    - name: Hello
      run: echo "Hello, world!"

  test:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run the unit tests with pytest
        run: |
          pip install pytest pytest-cov
          pip install pytest-json-report
          cd news_scraper/movie_api
          pytest --json-report --json-report-summary --json-report-file=movie-api-report.json --json-report-indent=4 || echo "ignore exit code 1"
          pytest --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
        continue-on-error: true

# Add a third job to your action: lint.
# This job should be almost identical to the test one, but instead of running pytest, run pylint on all relevant files instead.
# This job should only fail if the pylint score is below 8.
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Analysing the code with pylint
        run: |
          > news_scraper/movie_api/pylint_score
          find . -path "./.utils/*" -prune -o -name '*.py' -print \
          -exec pylint --rcfile ./.pylintrc {} \; \

      - name: Obtain average_score from JSON
        id: average_score
        run: |
          echo "SCORE=$(jq '.average_score' news_scraper/movie_api/pylint_score)" >> $GITHUB_ENV
    
  deploy:
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to Staging server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc -i"
          SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
          EXCLUDE: "/dist/, /node_modules/"
          SCRIPT_BEFORE: |
            whoami
            ls -al
          SCRIPT_AFTER: |
            whoami
            ls -al
            echo $RSYNC_STDOUT